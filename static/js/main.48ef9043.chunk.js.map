{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["dimensions","id","content","color","allocations","strategy","publisher","tactic","channel","amount","aggregate","field","reduce","agg","alloc","App","props","useState","items","setItems","reset","setReset","disappear","setDisappear","useEffect","DimensionBlock","styled","div","styles","css","onDragEnd","result","destination","newItems","list","startIndex","endIndex","Array","from","splice","removed","reorder","source","index","console","log","onDragStart","droppableId","direction","provided","snapshot","style","display","flexDirection","margin","justifyContent","ref","innerRef","isDraggingOver","background","padding","overflow","droppableProps","Button","marginRight","variant","onClick","map","item","draggableId","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","grid","borderRadius","placeholder","className","clsx","alignItems","transition","key","aggs","Object","keys","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48ef9043.chunk.js","sourcesContent":["import { css, Global } from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport { Button } from \"@material-ui/core\";\nimport { ArrowDownward, FormatAlignRightSharp } from \"@material-ui/icons\";\nimport clsx from \"clsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\nconst dimensions = [\n  { id: \"strategy\", content: \"Strategy\", color: \"rgba(255, 0, 0, 0.12)\" },\n  { id: \"publisher\", content: \"Publisher\", color: \"rgba(0, 255, 0, 0.12)\" },\n  { id: \"channel\", content: \"Channel\", color: \"rgba(255, 255, 0, 0.12)\" },\n  { id: \"tactic\", content: \"Tactic\", color: \"rgba(0, 0, 255, 0.12)\" },\n];\n\nconst strategies = [\"lower funnel\", \"mid funnel\", \"upper funnel\"];\nconst tactics = [\"retargeting\", \"prospecting\"];\nconst publishers = [\"trade desk\", \"google\", \"taboola\"];\nconst channels = [\"display\", \"video\"];\n\nconst allocations = [\n  {\n    strategy: \"lower funnel\",\n    publisher: \"taboola\",\n    tactic: \"retargeting\",\n    channel: \"display\",\n    amount: 1000,\n  },\n  {\n    strategy: \"mid funnel\",\n    publisher: \"google\",\n    tactic: \"prospecting\",\n    channel: \"video\",\n    amount: 1000,\n  },\n  {\n    strategy: \"upper funnel\",\n    publisher: \"trade desk\",\n    tactic: \"retargeting\",\n    channel: \"display\",\n    amount: 1000,\n  },\n  {\n    strategy: \"lower funnel\",\n    publisher: \"google\",\n    tactic: \"retargeting\",\n    channel: \"video\",\n    amount: 1000,\n  },\n  {\n    strategy: \"mid funnel\",\n    publisher: \"trade desk\",\n    tactic: \"prospecting\",\n    channel: \"video\",\n    amount: 1000,\n  },\n  {\n    strategy: \"upper funnel\",\n    publisher: \"google\",\n    tactic: \"retargeting\",\n    channel: \"display\",\n    amount: 1000,\n  },\n  {\n    strategy: \"upper funnel\",\n    publisher: \"trade desk\",\n    tactic: \"prospecting\",\n    channel: \"display\",\n    amount: 1000,\n  },\n  {\n    strategy: \"lower funnel\",\n    publisher: \"taboola\",\n    tactic: \"retargeting\",\n    channel: \"display\",\n    amount: 1000,\n  },\n];\n\nconst aggregate = (allocations: any[], field: string) => {\n  const aggs = allocations.reduce((agg: any, alloc: any) => {\n    agg[alloc[field]] = (agg[alloc[field]] ?? 0) + alloc.amount;\n    return agg;\n  }, {});\n  return aggs;\n};\n\n// a little function to help us with reordering the result\nconst reorder = (list: any[], startIndex: number, endIndex: number) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging: boolean, draggableStyle: any) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: `${grid}px ${grid * 2}px ${grid}px ${grid * 2}px`,\n  margin: `0 ${grid}px 0 0`,\n  borderRadius: 999,\n  color: \"white\",\n  // change background colour if dragging\n  background: isDragging ? \"darkorchid\" : \"indigo\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle,\n});\n\nconst getListStyle = (isDraggingOver: boolean) => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  display: \"flex\",\n  padding: grid,\n  overflow: \"auto\",\n});\n\nconst App = (props: any) => {\n  aggregate(allocations, \"publisher\");\n  const [items, setItems] = useState<any>([]);\n  const [reset, setReset] = useState<boolean>(false);\n  const [disappear, setDisappear] = useState<boolean>(false);\n  useEffect(() => {\n    setItems(dimensions);\n    setReset(false);\n  }, [reset]);\n\n  const onDragStart = () => {\n    setDisappear(true);\n  };\n\n  const onDragEnd = (result: any) => {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const newItems = reorder(\n      items,\n      result.source.index,\n      result.destination.index\n    );\n\n    console.log(newItems);\n    setDisappear(false);\n    setItems(newItems);\n  };\n\n  const DimensionBlock = styled.div`\n    text-decoration: none;\n    color: #000;\n    margin: 20px;\n    background: #ffc;\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    height: 5em;\n    width: 8em;\n    padding: 1em;\n    box-shadow: 3px 4px 6px rgba(33, 33, 33, 0.7);\n  `;\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  if (!items) return null;\n  return (\n    <>\n      <Global\n        styles={css`\n          .invisible {\n            opacity: 0.1 !important;\n          }\n          .visible {\n            opacity: 1;\n          }\n        `}\n      />\n      <DragDropContext onDragEnd={onDragEnd} onDragStart={onDragStart}>\n        <Droppable droppableId=\"droppable\" direction=\"horizontal\">\n          {(provided: any, snapshot: any) => (\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                margin: \"0 auto\",\n                justifyContent: \"space-around\",\n              }}\n            >\n              <div\n                ref={provided.innerRef}\n                style={getListStyle(snapshot.isDraggingOver)}\n                {...provided.droppableProps}\n              >\n                <Button\n                  style={{ marginRight: 10 }}\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  onClick={() => setReset(true)}\n                >\n                  Reset\n                </Button>\n                {items.map((item: any, index: number) => (\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\n                    {(provided: any, snapshot: any) => (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={getItemStyle(\n                          snapshot.isDragging,\n                          provided.draggableProps.style\n                        )}\n                      >\n                        {item.content}\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </div>\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n\n      <div\n        className={clsx([disappear && \"invisible\"])}\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          transition: \"opacity .25s\",\n          margin: \"0 auto\",\n        }}\n      >\n        {items.map((item: any, key: number) => {\n          const aggs = aggregate(allocations, item.id);\n          return (\n            <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n              {Object.keys(aggs).map((agg: any) => (\n                <DimensionBlock\n                  style={{\n                    backgroundColor: item.color,\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                  }}\n                >\n                  <div>{item.content}</div>\n                  <div>{agg}</div>\n                  <div>${aggs[agg]}</div>\n                </DimensionBlock>\n              ))}\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n\n//{//key < items.length - 1 && <ArrowDownward fontSize=\"large\" />}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}