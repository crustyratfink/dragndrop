{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["dimensions","id","content","color","App","props","useState","items","setItems","disappear","setDisappear","useEffect","DimensionBlock","styled","div","console","log","styles","css","onDragEnd","result","destination","newItems","list","startIndex","endIndex","Array","from","splice","removed","reorder","source","index","onDragStart","droppableId","direction","provided","snapshot","style","display","flexDirection","margin","justifyContent","ref","innerRef","isDraggingOver","background","padding","overflow","droppableProps","map","item","draggableId","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","grid","borderRadius","placeholder","className","clsx","alignItems","transition","width","key","backgroundColor","length","ArrowDownward","fontSize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAOMA,EAAa,CACjB,CAAEC,GAAI,WAAYC,QAAS,WAAYC,MAAO,yBAC9C,CAAEF,GAAI,YAAaC,QAAS,YAAaC,MAAO,yBAChD,CAAEF,GAAI,UAAWC,QAAS,UAAWC,MAAO,2BAC5C,CAAEF,GAAI,SAAUC,QAAS,SAAUC,MAAO,0BA8J7BC,EA3HH,SAACC,GAAgB,IAAD,EACAC,mBAAc,IADd,mBACnBC,EADmB,KACZC,EADY,OAEQF,oBAAkB,GAF1B,mBAEnBG,EAFmB,KAERC,EAFQ,KAG1BC,qBAAU,WACRH,EAASR,KACR,IAEH,IAqBMY,EAAiBC,IAAOC,IAAV,kTAgBpB,OAAKP,GACLQ,QAAQC,IAAIT,GAEV,qCACE,cAAC,IAAD,CACEU,OAAQC,YAAF,6KASR,cAAC,IAAD,CAAiBC,UA/CH,SAACC,GAEjB,GAAKA,EAAOC,YAAZ,CAIA,IAAMC,EAhDM,SAACC,EAAaC,EAAoBC,GAChD,IAAML,EAASM,MAAMC,KAAKJ,GAD2C,EAEnDH,EAAOQ,OAAOJ,EAAY,GAArCK,EAF8D,oBAKrE,OAFAT,EAAOQ,OAAOH,EAAU,EAAGI,GAEpBT,EA2CYU,CACfvB,EACAa,EAAOW,OAAOC,MACdZ,EAAOC,YAAYW,OAGrBjB,QAAQC,IAAIM,GACZZ,GAAa,GACbF,EAASc,KAiCgCW,YAnDvB,WAClBvB,GAAa,IAkDX,SACE,cAAC,IAAD,CAAWwB,YAAY,YAAYC,UAAU,aAA7C,SACG,SAACC,EAAeC,GAAhB,OACC,qBACEC,MAAO,CACLC,QAAS,OACTC,cAAe,MACfC,OAAQ,SACRC,eAAgB,gBALpB,SAQE,8CACEC,IAAKP,EAASQ,SACdN,OA9EMO,EA8EcR,EAASQ,eA9EM,CACjDC,WAAYD,EAAiB,YAAc,YAC3CN,QAAS,OACTQ,QAnBW,EAoBXC,SAAU,UA2EQZ,EAASa,gBAHf,cAKG1C,EAAM2C,KAAI,SAACC,EAAWnB,GAAZ,OACT,cAAC,IAAD,CAAyBoB,YAAaD,EAAKlD,GAAI+B,MAAOA,EAAtD,SACG,SAACI,EAAeC,GAAhB,OACC,yDACEM,IAAKP,EAASQ,UACVR,EAASiB,gBACTjB,EAASkB,iBAHf,IAIEhB,OAtGFiB,EAuGIlB,EAASkB,WAvGQC,EAwGjBpB,EAASiB,eAAef,MAxG7B,aAEnBmB,WAAY,OACZV,QAAQ,GAAD,OALI,EAKJ,cAAeW,GAAf,cALI,EAKJ,cAAuCA,GAAvC,MACPjB,OAAO,KAAD,OANK,EAML,UACNkB,aAAc,IACdxD,MAAO,QAEP2C,WAAYS,EAAa,aAAe,UAGrCC,IAuFiB,SASGL,EAAKjD,WA3GT,IAACqD,EAAqBC,IAgGTL,EAAKlD,OAgBtBmC,EAASwB,kBAlGL,IAACf,OAwGhB,qBACEgB,UAAWC,YAAK,CAACrD,GAAa,cAC9B6B,MAAO,CACLC,QAAS,OACTC,cAAe,SACfuB,WAAY,SACZC,WAAY,eACZvB,OAAQ,SACRwB,MAAO,OARX,SAWG1D,EAAM2C,KAAI,SAACC,EAAWe,GACrB,OACE,qCACE,cAACtD,EAAD,CAAgB0B,MAAO,CAAE6B,gBAAiBhB,EAAKhD,OAA/C,SACGgD,EAAKjD,UAEPgE,EAAO3D,EAAM6D,OAAS,GAAM,cAACC,EAAA,EAAD,CAAeC,SAAS,sBAtE9C,MC5ENC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.758ef39a.chunk.js","sourcesContent":["import { css, Global } from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport { ArrowDownward } from \"@material-ui/icons\";\nimport clsx from \"clsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\nconst dimensions = [\n  { id: \"strategy\", content: \"Strategy\", color: \"rgba(255, 0, 0, 0.12)\" },\n  { id: \"publisher\", content: \"Publisher\", color: \"rgba(0, 255, 0, 0.12)\" },\n  { id: \"channel\", content: \"Channel\", color: \"rgba(255, 255, 0, 0.12)\" },\n  { id: \"tactic\", content: \"Tactic\", color: \"rgba(0, 0, 255, 0.12)\" },\n];\n\n// a little function to help us with reordering the result\nconst reorder = (list: any[], startIndex: number, endIndex: number) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging: boolean, draggableStyle: any) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: `${grid}px ${grid * 2}px ${grid}px ${grid * 2}px`,\n  margin: `0 ${grid}px 0 0`,\n  borderRadius: 999,\n  color: \"white\",\n  // change background colour if dragging\n  background: isDragging ? \"darkorchid\" : \"indigo\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle,\n});\n\nconst getListStyle = (isDraggingOver: boolean) => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  display: \"flex\",\n  padding: grid,\n  overflow: \"auto\",\n});\n\nconst App = (props: any) => {\n  const [items, setItems] = useState<any>([]);\n  const [disappear, setDisappear] = useState<boolean>(false);\n  useEffect(() => {\n    setItems(dimensions);\n  }, []);\n\n  const onDragStart = () => {\n    setDisappear(true);\n  };\n\n  const onDragEnd = (result: any) => {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const newItems = reorder(\n      items,\n      result.source.index,\n      result.destination.index\n    );\n\n    console.log(newItems);\n    setDisappear(false);\n    setItems(newItems);\n  };\n\n  const DimensionBlock = styled.div`\n    text-decoration: none;\n    color: #000;\n    margin: 20px;\n    background: #ffc;\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    height: 5em;\n    width: 5em;\n    padding: 1em;\n    box-shadow: 3px 4px 6px rgba(33, 33, 33, 0.7);\n  `;\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  if (!items) return null;\n  console.log(items);\n  return (\n    <>\n      <Global\n        styles={css`\n          .invisible {\n            opacity: 0.1 !important;\n          }\n          .visible {\n            opacity: 1;\n          }\n        `}\n      />\n      <DragDropContext onDragEnd={onDragEnd} onDragStart={onDragStart}>\n        <Droppable droppableId=\"droppable\" direction=\"horizontal\">\n          {(provided: any, snapshot: any) => (\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                margin: \"0 auto\",\n                justifyContent: \"space-around\",\n              }}\n            >\n              <div\n                ref={provided.innerRef}\n                style={getListStyle(snapshot.isDraggingOver)}\n                {...provided.droppableProps}\n              >\n                {items.map((item: any, index: number) => (\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\n                    {(provided: any, snapshot: any) => (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={getItemStyle(\n                          snapshot.isDragging,\n                          provided.draggableProps.style\n                        )}\n                      >\n                        {item.content}\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </div>\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n      <div\n        className={clsx([disappear && \"invisible\"])}\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: 'center',\n          transition: \"opacity .25s\",\n          margin: \"0 auto\",\n          width: '5em',\n        }}\n      >\n        {items.map((item: any, key: number) => {\n          return (\n            <>\n              <DimensionBlock style={{ backgroundColor: item.color }}>\n                {item.content}\n              </DimensionBlock>\n              {key < (items.length - 1) && <ArrowDownward fontSize=\"large\" />}\n            </>\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}