{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["dimensions","id","content","color","allocations","strategy","publisher","tactic","channel","amount","aggregate","field","aggs","reduce","agg","alloc","total","App","props","useState","items","setItems","reset","setReset","disappear","setDisappear","useEffect","DimensionBlock","styled","div","DimensionBlockInner","TreeItem","level","item","value","style","backgroundColor","filter","dim","TreeLevel","console","group","log","groupEnd","Object","keys","map","childLevel","children","length","label","root","tree","buildTree","allocs","levels","newLevels","JSON","parse","stringify","thisLevel","shift","dimVals","results","result","forEach","dv","rootLevel","styles","css","onDragEnd","destination","newItems","list","startIndex","endIndex","Array","from","splice","removed","reorder","source","index","onDragStart","droppableId","direction","provided","snapshot","display","flexDirection","margin","justifyContent","ref","innerRef","isDraggingOver","background","padding","overflow","droppableProps","Button","marginRight","variant","onClick","draggableId","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","grid","borderRadius","placeholder","className","clsx","alignItems","transition","lineWidth","lineColor","lineBorderRadius","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.99ac7091.chunk.js","sourcesContent":["import { css, Global } from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport { Button } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { Tree, TreeNode } from \"react-organizational-chart\";\n\nconst dimensions = [\n  { id: \"strategy\", content: \"Strategy\", color: \"rgba(255, 0, 0, 0.12)\" },\n  { id: \"publisher\", content: \"Publisher\", color: \"rgba(0, 255, 0, 0.12)\" },\n  { id: \"channel\", content: \"Channel\", color: \"rgba(255, 255, 0, 0.12)\" },\n  { id: \"tactic\", content: \"Tactic\", color: \"rgba(0, 0, 255, 0.12)\" },\n];\n\n// const strategies = [\"lower funnel\", \"mid funnel\", \"upper funnel\"];\n// const tactics = [\"retargeting\", \"prospecting\"];\n// const publishers = [\"trade desk\", \"google\", \"taboola\"];\n// const channels = [\"display\", \"video\"];\n\nconst allocations = [\n  {\n    strategy: \"lower funnel\",\n    publisher: \"taboola\",\n    tactic: \"retargeting\",\n    channel: \"display\",\n    amount: 1000,\n  },\n  {\n    strategy: \"mid funnel\",\n    publisher: \"google\",\n    tactic: \"prospecting\",\n    channel: \"video\",\n    amount: 1000,\n  },\n  {\n    strategy: \"upper funnel\",\n    publisher: \"trade desk\",\n    tactic: \"retargeting\",\n    channel: \"display\",\n    amount: 1000,\n  },\n  {\n    strategy: \"lower funnel\",\n    publisher: \"google\",\n    tactic: \"retargeting\",\n    channel: \"video\",\n    amount: 1000,\n  },\n  {\n    strategy: \"mid funnel\",\n    publisher: \"trade desk\",\n    tactic: \"prospecting\",\n    channel: \"video\",\n    amount: 1000,\n  },\n  {\n    strategy: \"upper funnel\",\n    publisher: \"google\",\n    tactic: \"retargeting\",\n    channel: \"display\",\n    amount: 1000,\n  },\n  {\n    strategy: \"upper funnel\",\n    publisher: \"trade desk\",\n    tactic: \"prospecting\",\n    channel: \"display\",\n    amount: 1000,\n  },\n  {\n    strategy: \"lower funnel\",\n    publisher: \"taboola\",\n    tactic: \"retargeting\",\n    channel: \"display\",\n    amount: 1000,\n  },\n];\n\nconst aggregate = (allocations: any[], field: string = \"total\") => {\n  const aggs = allocations.reduce((agg: any, alloc: any) => {\n    if (field === \"total\") {\n      agg.total = (agg.total ?? 0) + alloc.amount;\n    } else {\n      agg[alloc[field]] = (agg[alloc[field]] ?? 0) + alloc.amount;\n    }\n    return agg;\n  }, {});\n  return aggs;\n};\n\n// a little function to help us with reordering the result\nconst reorder = (list: any[], startIndex: number, endIndex: number) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging: boolean, draggableStyle: any) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: `${grid}px ${grid * 2}px ${grid}px ${grid * 2}px`,\n  margin: `0 ${grid}px 0 0`,\n  borderRadius: 999,\n  color: \"white\",\n  // change background colour if dragging\n  background: isDragging ? \"darkorchid\" : \"indigo\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle,\n});\n\nconst getListStyle = (isDraggingOver: boolean) => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  display: \"flex\",\n  padding: grid,\n  overflow: \"auto\",\n});\n\nconst App = (props: any) => {\n  aggregate(allocations, \"publisher\");\n  const [items, setItems] = useState<any>([]);\n  const [reset, setReset] = useState<boolean>(false);\n  const [disappear, setDisappear] = useState<boolean>(false);\n  useEffect(() => {\n    setItems(dimensions);\n    setReset(false);\n  }, [reset]);\n\n  const onDragStart = () => {\n    setDisappear(true);\n  };\n\n  const onDragEnd = (result: any) => {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const newItems = reorder(\n      items,\n      result.source.index,\n      result.destination.index\n    );\n\n    console.log(newItems);\n    setDisappear(false);\n    setItems(newItems);\n  };\n\n  const buildTree = (allocs: any, levels: any) => {\n    if (levels.length === 0) return;\n    const newLevels = JSON.parse(JSON.stringify(levels));\n    const thisLevel = newLevels.shift();\n    console.log(\"This Level: \", thisLevel);\n    const aggs = aggregate(allocs, thisLevel.id);\n    const dimVals = Object.keys(aggs);\n    console.log(newLevels);\n    const results: any = {};\n    const result: any = {};\n    dimVals.forEach((dv: string) => {\n      results[dv] = {};\n      results[dv].root = aggs[dv];\n      results[dv].children = buildTree(\n        allocs.filter((alloc: any) => alloc[thisLevel.id] === dv),\n        newLevels\n      );\n    });\n    result[thisLevel.id] = results;\n    console.log(result);\n    return result;\n  };\n\n  const DimensionBlock = styled.div`\n    display: inline-block;\n    height: 5em;\n    width: 8em;\n    box-shadow: 3px 4px 6px rgba(33, 33, 33, 0.7);\n  `;\n\n  const DimensionBlockInner = styled.div`\n    text-decoration: none;\n    padding: 1em;\n    box-sizing: border-box;\n    width: 100%;\n    height: 100%;\n    color: #000;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    background-color: inherit;\n  `;\n\n  const TreeItem = ({ level, item, value }: any) => (\n    <DimensionBlock\n      style={{\n        backgroundColor: dimensions.filter((dim: any) => dim.id === level)[0]\n          .color,\n      }}\n    >\n      <DimensionBlockInner>\n        <div>{level}</div>\n        <div>{item}</div>\n        <div>${value}</div>\n      </DimensionBlockInner>\n    </DimensionBlock>\n  );\n\n  const TreeLevel = ({ level, items }: any) => {\n    console.group(\"TreeLevel\");\n    console.log(level);\n    console.log(items);\n    console.groupEnd();\n    return (\n      <>\n        {Object.keys(items).map((item: any) => {\n          const childLevel =\n            items[item].children && Object.keys(items[item].children).length > 0\n              ? Object.keys(items[item].children)[0]\n              : null;\n          return (\n            <TreeNode\n              label={\n                <TreeItem level={level} item={item} value={items[item].root} />\n              }\n            >\n              {childLevel && (\n                <TreeLevel\n                  level={childLevel}\n                  items={items[item].children[childLevel]}\n                />\n              )}\n            </TreeNode>\n          );\n        })}\n      </>\n    );\n  };\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  if (!items) return null;\n  const tree = buildTree(allocations, items);\n  console.log(tree);\n  const rootLevel = tree ? Object.keys(tree)[0] : \"\";\n  console.log(rootLevel);\n  return (\n    <>\n      <Global\n        styles={css`\n          .invisible {\n            opacity: 0.1 !important;\n          }\n          .visible {\n            opacity: 1;\n          }\n        `}\n      />\n      <DragDropContext onDragEnd={onDragEnd} onDragStart={onDragStart}>\n        <Droppable droppableId=\"droppable\" direction=\"horizontal\">\n          {(provided: any, snapshot: any) => (\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                margin: \"60px auto 60px 0\",\n                justifyContent: \"space-around\",\n              }}\n            >\n              <div\n                ref={provided.innerRef}\n                style={getListStyle(snapshot.isDraggingOver)}\n                {...provided.droppableProps}\n              >\n                <Button\n                  style={{ marginRight: 10 }}\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  onClick={() => setReset(true)}\n                >\n                  Reset\n                </Button>\n                {items.map((item: any, index: number) => (\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\n                    {(provided: any, snapshot: any) => (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={getItemStyle(\n                          snapshot.isDragging,\n                          provided.draggableProps.style\n                        )}\n                      >\n                        {item.content}\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </div>\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n\n      <div\n        className={clsx([disappear && \"invisible\"])}\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          transition: \"opacity .25s\",\n          margin: \"0 auto\",\n        }}\n      >\n        {tree && (\n          <Tree\n            lineWidth={\"2px\"}\n            lineColor={\"green\"}\n            lineBorderRadius={\"10px\"}\n            label={\n              <DimensionBlock\n                style={{\n                  backgroundColor: \"lightgray\",\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  margin: \"0 auto\",\n                }}\n              >\n                <DimensionBlockInner>\n                  <div>Fluffery</div>\n                  <div>Name</div>\n                  <div>${aggregate(allocations).total}</div>\n                </DimensionBlockInner>\n              </DimensionBlock>\n            }\n          >\n            <TreeLevel level={rootLevel} items={tree[rootLevel]} />\n          </Tree>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n\n//{//key < items.length - 1 && <ArrowDownward fontSize=\"large\" />}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}